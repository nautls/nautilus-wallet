import{_ as a,c as s,o as t,ae as i}from"./chunks/framework.tuuL-SzM.js";const k=JSON.parse('{"title":"API Overview","description":"","frontmatter":{},"headers":[],"relativePath":"dapp-connector/api-overview.md","filePath":"dapp-connector/api-overview.md","lastUpdated":1731325437000}'),n={name:"dapp-connector/api-overview.md"};function o(l,e,p,h,r,c){return t(),s("div",null,e[0]||(e[0]=[i(`<h1 id="api-overview" tabindex="-1">API Overview <a class="header-anchor" href="#api-overview" aria-label="Permalink to &quot;API Overview&quot;">​</a></h1><p>Nautilus provides a convenient and easy way for dApps to interact with wallets through its dApp Connector API, also known as EIP-12 protocol. The protocol provides a seamless bridge between your dApp and the user&#39;s wallet, enabling secure and efficient communication. This ensures that your dApp can perform necessary operations such as balance checks and transaction signing with the user&#39;s permission.</p><p>The dApp Connector API is an asynchronous wrapper on top of a <code>JSON-RPC</code> protocol that is injected into the browser&#39;s page context by the Nautilus Wallet extension. It&#39;s divided into two main parts: the <strong>Connection API</strong> and the <strong>Context API</strong>, as described below.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><strong>Work-in-Progress</strong>: Non-reviewed text. You may find numerous writing errors throughout this guide.</p></div><h2 id="connection-api" tabindex="-1">Connection API <a class="header-anchor" href="#connection-api" aria-label="Permalink to &quot;Connection API&quot;">​</a></h2><p>The Connection API is responsible for handling wallet connection requests and providing initial information about available EIP-12 compatible wallet applications.</p><p>EIP-12 compatible browser wallets on Ergo, like Nautilus, automatically inject the <strong>Connection API</strong> into every active page, allowing any page context to interact with it directly through the <code>ergoConnector</code> object.</p><h3 id="multi-wallet-support" tabindex="-1">Multi-wallet support <a class="header-anchor" href="#multi-wallet-support" aria-label="Permalink to &quot;Multi-wallet support&quot;">​</a></h3><p>The Connection API is designed to support multiple wallets. To connect to a wallet, use the <code>ergoConnector.{walletId}.connect()</code> method, where <code>{walletId}</code> is the wallet of your choice. For our example, we will use <code>nautilus</code>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ergoConnector.nautilus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="context-api" tabindex="-1">Context API <a class="header-anchor" href="#context-api" aria-label="Permalink to &quot;Context API&quot;">​</a></h2><p>The Context API is responsible for handling wallet-related requests such as retrieving balances, signing transactions, and more.</p><p>Once the connection request is accepted by the user, this API will be injected similarly to the Connection API, allowing interaction through the <code>ergo</code> object. Alternatively it can be returned by the <code>ergoConnector.nautilus.connect()</code> method as demonstrated in the <a href="/dapp-connector/wallet-connection">Wallet connection</a> section.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ergo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_balance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><h2 id="static-types" tabindex="-1">Static Types <a class="header-anchor" href="#static-types" aria-label="Permalink to &quot;Static Types&quot;">​</a></h2><p>For a better development experience, Nautilus <a href="https://github.com/capt-nemo429/eip12-types" target="_blank" rel="noreferrer">maintains a static typing library</a> for the dApp Connector protocol. Follow the steps below to get types working in your TypeScript project.</p><h3 id="step-1-install-the-package" tabindex="-1">Step. 1: Install the package <a class="header-anchor" href="#step-1-install-the-package" aria-label="Permalink to &quot;Step. 1: Install the package&quot;">​</a></h3><p>Add <code>@nautilus-js/eip12-types</code> as a <code>dev-dependency</code>for your project.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-lOmyM" id="tab-d2flmTJ" checked><label data-title="npm" for="tab-d2flmTJ">npm</label><input type="radio" name="group-lOmyM" id="tab-eZAL86Y"><label data-title="pnpm" for="tab-eZAL86Y">pnpm</label><input type="radio" name="group-lOmyM" id="tab-3F2Looi"><label data-title="bun" for="tab-3F2Looi">bun</label><input type="radio" name="group-lOmyM" id="tab-Lm_c6cj"><label data-title="yarn" for="tab-Lm_c6cj">yarn</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nautilus-js/eip12-types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pnpm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nautilus-js/eip12-types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nautilus-js/eip12-types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yarn</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @nautilus-js/eip12-types</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -D</span></span></code></pre></div></div></div><h3 id="step-2-tweak-the-tsconfig-json-file" tabindex="-1">Step. 2: Tweak the <code>tsconfig.json</code> file <a class="header-anchor" href="#step-2-tweak-the-tsconfig-json-file" aria-label="Permalink to &quot;Step. 2: Tweak the \`tsconfig.json\` file&quot;">​</a></h3><p>Add <code>@nautilus-js/eip12-types</code> to the <code>compilerOptions.types</code> array.</p><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add &quot;@nautilus-js/eip12-types&quot; to the types array</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;@nautilus-js/eip12-types&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,22)]))}const u=a(n,[["render",o]]);export{k as __pageData,u as default};
